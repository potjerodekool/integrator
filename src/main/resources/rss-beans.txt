@Value(value = "https://spring.io/blog.atom")
    private val feedResource: Resource? = null

    @Bean
    fun feedFlow(): IntegrationFlow? {
        return IntegrationFlows
            .from(
                Feed.inboundAdapter(feedResource, "news")
            ) { e: SourcePollingChannelAdapterSpec ->
                e.poller { p: PollerFactory -> p.fixedDelay(5000) }
            }
            .handle(messageHandler())
            //.transform(extractLinkFromFeed()).handle(messageHandler()) // .handle(System.out::println)
            .get()
    }

    @Bean
    fun extractLinkFromFeed(): AbstractPayloadTransformer<SyndEntry?, String?> {
        return object : AbstractPayloadTransformer<SyndEntry?, String?>() {

            override fun transformPayload(payload: SyndEntry?): String? {
                return if (payload != null) payload.title + " " + payload.author + " " + payload.link else null
            }
        }
    }

    @Bean
    fun messageHandler(): MessageHandler {
        return object : MessageHandler {

            override fun handleMessage(message: Message<*>) {
                println("message headers ${message.headers}")
                println("payload ${message.payload}")
            }
        }
    }